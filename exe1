import heapq 
 

goal_state = (1, 2, 3, 8, 0, 4, 7, 6, 5) 
 

moves =[(1, 0), (-1, 0), (0, 1), (0, -1)] 
 
def get_neighbors (state):
neighbors =[] 
 zero_index = state.index (0) 
 row, col = zero_index 
									
  for dr
, dc in moves:
new_row, new_col = row + dr, col + dc 
 if 0
  <=new_row < 3 and 0 <= new_col < 3: 
new_state = list (state) 
 new_zero_index = new_row * 3 + new_col 
 new_state[zero_index], new_state[new_zero_index] = new_state[new_zero_index], new_state[zero_index] 
 neighbors.append (tuple (new_state)) 
 return neighbors 
 
def heuristic (state):

      h = 0 
 for i
    in range (9):
if state
      [i] != 0:
goal_index = goal_state.index (state[i]) 
 goal_row, goal_col = goal_index
                                                                            
     current_row, current_col = i 
      h += abs (goal_row - current_row) + abs (goal_col - current_col) 
 return h 
 
def solve_puzzle (initial_state):
open_list =[(heuristic (initial_state), 0, initial_state)] 
   closed_set = set () 
   
while open_list
     :
_, g, current_state = heapq.heappop (open_list) 
         
if current_state
    == goal_state:
return g 
 
if current_state
      in closed_set:
continue 
           
closed_set.add (current_state) 
               
for neighbor
        in get_neighbors (current_state):
if neighbor
            not in closed_set:
f = g + 1 + heuristic (neighbor) 
               heapq.heappush (open_list, (f, g + 1, neighbor)) 
              
return -1


               initial_state = (2, 8, 3, 1, 6, 4, 7, 0, 5) 
                   steps = solve_puzzle (initial_state) 
 
if steps
             !=-1:
print (f "Solution found in {steps} steps.")
                 
             else
                 :
print ("No solution found.")
